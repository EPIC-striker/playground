// Copyright 2020 Las Venturas Playground. All rights reserved.
// Use of this source code is governed by the MIT license, a copy of which can
// be found in the LICENSE file.

// The file in which information about the system has been stored. Must be a service account key
// file generated by the Google Cloud Console.
const kAuthenticationFile = 'gunther.json';

// The private token, to force-disable the constructor of the system.
const kPrivateToken = Symbol('Gunther');

// Encapsulates the authentication info that's been made available for the service account in the
// JSON configuration file, when it exists, which is an optional feature of LVP.
export class AuthenticationInfo {
    static loadFromDisk() {
        let authenticationContents = null;
        try {
            authenticationContents = readFile(kAuthenticationFile);
        } catch {
            return null;  // the |kAuthenticationFile| does not exist
        }

        return new AuthenticationInfo(kPrivateToken, JSON.parse(authenticationContents));
    }

    #authenticationUrl_ = null;
    #clientEmail_ = null;
    #clientId_ = null;
    #privateKey_ = null;
    #privateKeyId_ = null;
    #projectId_ = null;
    #tokenUrl_ = null;

    // Gets the URL against which authentication can commence.
    get authenticationUrl() { return this.#authenticationUrl_; }

    // Gets the e-mail address associated with this service account.
    get clientEmail() { return this.#clientEmail_; }

    // Gets the unique ID, as a number, of the service account client.
    get clientId() { return this.#clientId_; }

    // TODO: Private key ---------------------------------------------------------------------------

    // Gets the Project ID that this client is part of.
    get projectId() { return this.#projectId_; }

    // Gets the URL against which JWT tokens can be issued, to get authentication tokens back.
    get tokenUrl() { return this.#tokenUrl_; }

    constructor(privateToken, configuration){ 
        if (privateToken !== kPrivateToken)
            throw new Error(`Only use AuthenticationInfo.loadFromDisk() to instantiate this class`);

        if (configuration.type !== 'service_account')
            throw new Error(`Only service accounts can be loaded as authentication information`);

        this.#authenticationUrl_ = configuration.auth_uri;
        this.#clientEmail_ = configuration.client_email;
        this.#clientId_ = parseInt(configuration.client_id, 10);
        this.#projectId_ = configuration.project_id;
        this.#tokenUrl_ = configuration.token_uri;
    }
}
